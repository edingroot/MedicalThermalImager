/**
 * References to configuring OpenCV JNI for Android:
 *  - [Android 使用OpenCV的三种方式]
 *      https://blog.csdn.net/sbsujjbcy/article/details/49520791
 *  - [How to use my own Android.mk file with Android Studio]
 *      https://stackoverflow.com/questions/27833530/how-to-use-my-own-android-mk-file-with-android-sudio
 *  - [Android studio 1.5.1 NDK JNI環境安裝與執行原理]
 *      http://blog.xuite.net/lwchafter30/blog/373974237-Android+studio+1.5.1+NDK+JNI%E7%92%B0%E5%A2%83%E5%AE%89%E8%A3%9D%E8%88%87%E5%9F%B7%E8%A1%8C%E5%8E%9F%E7%90%86
 *  - [错误 undefined reference to '__atomic_fetch_add_4']
 *      https://blog.csdn.net/Qyee16/article/details/47070115
 *  - [Android Studio failed build NDK project non-zero exit value]
 *      https://stackoverflow.com/a/42255268
 */

def versionMajor = 2
def versionMinor = 0
def versionPatch = 0

apply plugin: 'com.android.application'
android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    defaultConfig {
        applicationId "tw.cchi.medthimager"
        minSdkVersion 21
        targetSdkVersion 27
        multiDexEnabled true

        // e.g. 1.2.345 -> 1020345
        versionCode versionMajor * 1000000 + versionMinor * 10000 + versionPatch
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        // used by Room, to test migrations
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        externalNativeBuild {
            ndkBuild {
                targets "NativeLibs"
                abiFilters "armeabi-v7a"
                arguments '-C' + file('src/main/jni').absolutePath,
                        "NDK_APPLICATION_MK:=" + file('src/main/jni/Application.mk').absolutePath,
                        '-j' + Runtime.runtime.availableProcessors()
                // 'NDK_DEBUG=1'
            }
        }
    }
    signingConfigs { release }

    buildTypes {
        debug {
            versionNameSuffix ".debug"
            resValue "string", "app_version", "${defaultConfig.versionName}${versionNameSuffix}"
        }

        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            // Ref: https://stackoverflow.com/questions/13218772/removing-log-call-using-proguard
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            resValue "string", "app_version", "${defaultConfig.versionName}"
        }
    }

    // Load release signing configs
    File propFile = file('signing.properties')
    if (propFile.exists()) {
        Properties props = new Properties()
        props.load(new FileInputStream(propFile))

        if (props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
                props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
            android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
            android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
        } else {
            android.buildTypes.release.signingConfig = null
        }
    } else {
        android.buildTypes.release.signingConfig = null
    }

    sourceSets {
        // Used by Room, to test migrations
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())

        // Disable (built-in) automatic ndk-build call with auto-generated Android.mk
        // main.jni.srcDirs = []
        // Set libs as .so's location instead of jniLibs
        // main.jniLibs.srcDirs = ['src/main/libs', 'src/main/jniLibs']
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        abortOnError false
        disable 'LongLogTag' // mitigate log tag too long error caused by OpenCV loader
    }
    productFlavors {
    }

    // Speed up development build
    // Set "-PdevBuild" in compiler command-line options.
    // Ref: https://medium.com/mindorks/lets-speed-up-your-gradle-build-6c0e401883e2
    if (project.hasProperty("devBuild")) {
        splits.abi.enable = false
        splits.density.enable = false
        aaptOptions.cruncherEnabled = false
    }

    externalNativeBuild {
        ndkBuild {
            path 'src/main/jni/Android.mk'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation(name: 'flironesdk', ext: 'aar')

    // https://mvnrepository.com/artifact/commons-io/commons-io
    implementation 'commons-io:commons-io:2.5'

    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:support-v4:27.1.1'
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'com.android.support:design:27.1.1'
    implementation 'com.android.support:cardview-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
    implementation 'com.google.firebase:firebase-core:15.0.2'

    implementation 'com.github.PhilJay:MPAndroidChart:v3.0.3'
    implementation 'com.droidninja:filepicker:2.1.2'

    // ButterKnife
    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'

    // Dagger2
    implementation 'com.google.dagger:dagger:2.16'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.16'

    // RxAndroid
    implementation 'io.reactivex.rxjava2:rxjava:2.1.12'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'

    // RxBinding
    implementation 'com.jakewharton.rxbinding2:rxbinding:2.1.1'
    implementation 'com.jakewharton.rxbinding2:rxbinding-appcompat-v7:2.1.1'
    implementation 'com.jakewharton.rxbinding2:rxbinding-design:2.1.1'
    implementation 'com.jakewharton.rxbinding2:rxbinding-recyclerview-v7:2.1.1'

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$rootProject.retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$rootProject.retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$rootProject.retrofitVersion"
    implementation 'com.google.code.gson:gson:2.8.4'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.10.0'

    // PermissionsDispatcher
    implementation 'com.github.hotchemi:permissionsdispatcher:3.0.1'
    annotationProcessor "com.github.hotchemi:permissionsdispatcher-processor:3.0.1"

    // Room Database Library
    implementation "android.arch.persistence.room:runtime:$rootProject.roomVersion"
    annotationProcessor "android.arch.persistence.room:compiler:$rootProject.roomVersion"
    androidTestImplementation "android.arch.persistence.room:testing:$rootProject.roomVersion"

    // Debug tool - leakcanary
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.5.4'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.4'
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

apply plugin: 'com.google.gms.google-services'
